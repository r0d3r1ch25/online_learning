apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: online-learning-cron-v0
spec:
  schedule: "*/2 * * * *"  # Every 2 minutes
  timezone: "UTC"
  workflowSpec:
    entrypoint: python-pipeline
    templates:
    - name: python-pipeline
      script:
        image: python:3.11-alpine
        command: ["python"]
        source: |
          import urllib.request
          import json
          import datetime
          
          print(f"Processing observation at {datetime.datetime.now()}")
          
          try:
              # Get observation
              req = urllib.request.Request("http://ingestion-service.ml-services.svc.cluster.local:8002/next")
              with urllib.request.urlopen(req, timeout=10) as response:
                  observation = json.loads(response.read().decode())
              
              actual_value = observation['target']
              print(f"Actual: {actual_value}")
              
              # Get features
              feature_data = json.dumps({"series_id": "argo_python_pipeline", "value": actual_value})
              req = urllib.request.Request(
                  "http://feature-service.ml-services.svc.cluster.local:8001/add",
                  data=feature_data.encode(),
                  headers={'Content-Type': 'application/json'}
              )
              with urllib.request.urlopen(req, timeout=10) as response:
                  feature_result = json.loads(response.read().decode())
              
              # Predict and learn
              model_data = json.dumps({
                  "features": feature_result['features'],
                  "target": feature_result['target']
              })
              req = urllib.request.Request(
                  "http://model-service.ml-services.svc.cluster.local:8000/predict_learn",
                  data=model_data.encode(),
                  headers={'Content-Type': 'application/json'}
              )
              with urllib.request.urlopen(req, timeout=10) as response:
                  model_result = json.loads(response.read().decode())
              
              prediction = model_result['prediction']
              print(f"Prediction: {prediction}")
              print(f"Actual: {actual_value} | Prediction: {prediction}")
              print(f"Completed at {datetime.datetime.now()}")
              
          except Exception as e:
              print(f"Error: {e}")
              if "HTTP Error 204" in str(e):
                  print("No more observations available")
              exit(0)
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"